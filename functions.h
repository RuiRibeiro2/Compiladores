#include "structures.h"

is_program * insert_program(is_declarations_list * idl);
is_declarations_list * insert_declaration(is_declarations_list * head, is_declaration * id);
is_declaration * insert_var_declaration(is_var_spec * ivs);
is_declaration * insert_func_declaration(char * id, is_parameter * iparam, parameter_type type, is_func_body * ifb);
is_var_spec * insert_var_specifications(char * id, is_id_list * iis, parameter_type type);
is_id_list * insert_var_id(is_id_list * head, char * id );
is_parameter * insert_parameter(char * id, parameter_type type, is_id_type_list * iitl);
is_id_type_list * insert_id_type(is_id_type_list * head, char * id, parameter_type type);
is_func_body * insert_func_body(is_vars_and_statements_list * ivsl);
is_vars_and_statements_list * insert_var_dec(is_vars_and_statements_list * head, is_var_dec * ivd);
is_vars_and_statements_list * insert_statements(is_vars_and_statements_list * head, is_statement * is);
is_statement * insert_if_statement(is_expression_or_list * iel, is_statements_list * if_isl, is_statements_list * else_isl);
is_statement * insert_for_statement(is_expression_or_list * iel, is_statements_list* isl);
is_statement * insert_return_statement(is_expression_or_list * iel);
is_statement * insert_print_expr_statement(is_expression_or_list * iel);
is_statement * insert_print_str_statement(char * id);
is_statement * insert_assign_statement(char * id, is_expression_or_list * iel);
is_statement * insert_statements_list(is_statements_list * isl);
is_statement * insert_final_statement(is_final_statement * ifs);
is_final_statement * insert_final_state_args(is_parse_arguments * ipa);
is_final_statement * insert_final_state_func_inv(is_function_invocation * ifi);
is_statements_list * insert_statement_in_list(is_statements_list * head, is_statement * is);
is_parse_arguments * insert_parse_args( char * id, is_expression_or_list * iel);
is_function_invocation * insert_func_inv(char * id, is_expression_or_list * iel, is_func_inv_expr_list * head);
is_func_inv_expr_list * insert_expression(is_func_inv_expr_list * head, is_expression_or_list * ieol);
is_expression_or_list * insert_or(is_expression_or_list *, is_expression_and_list*);
is_expression_and_list * insert_and(is_expression_and_list *, is_expression_comp_list *);
is_expression_comp_list * insert_comp(is_expression_comp_list *, comp_type, is_expression_sum_like_list *);
is_expression_sum_like_list * insert_sum_like(is_expression_sum_like_list *, sum_like_type, is_expression_star_like_list *);
is_expression_star_like_list* insert_star_like(is_expression_star_like_list *, star_like_type, is_self_expression_list*);
is_self_expression_list * insert_self(is_self_expression_list*, self_operation_type, is_final_expression *);
//is_final_expression * insert_intlit(char * id);
is_final_expression * insert_natural(char * id);
//is_final_expression * insert_real(char * id);
is_final_expression * insert_decimal(char * id);
is_final_expression * insert_id(char * id);
is_final_expression * insert_final_func_inv(is_function_invocation * ifi);
is_final_expression * insert_final_expr(is_expression_or_list*iel);
comp_type insert_comp_oper(char * oper);
sum_like_type insert_sum_like_oper(char * oper);
star_like_type insert_star_like_oper(char * oper);
self_operation_type insert_self_oper(char * oper);
parameter_type insert_type(char * type);
